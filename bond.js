// Generated by CoffeeScript 1.3.3
(function() {
  var arrayEqual, bond, createSpy,
    __slice = [].slice;

  createSpy = function(getValue) {
    var spy;
    spy = function() {
      var args;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      spy.calledArgs[spy.called] = args;
      spy.called++;
      return getValue(args);
    };
    spy.called = 0;
    spy.calledArgs = [];
    spy.calledWith = function() {
      var args, lastArgs;
      args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      if (!spy.called) {
        return false;
      }
      lastArgs = spy.calledArgs[spy.called - 1];
      return arrayEqual(args, lastArgs);
    };
    return spy;
  };

  arrayEqual = function(A, B) {
    var a, b, i, _i, _len;
    for (i = _i = 0, _len = A.length; _i < _len; i = ++_i) {
      a = A[i];
      b = B[i];
      if (a !== b) {
        return false;
      }
    }
    return true;
  };

  bond = function(obj, property) {
    var previous, returnMethod, through, to;
    previous = obj[property];
    to = function(newValue) {
      afterEach(function() {
        return obj[property] = previous;
      });
      obj[property] = newValue;
      return obj[property];
    };
    returnMethod = function(returnValue) {
      afterEach(function() {
        return obj[property] = previous;
      });
      obj[property] = createSpy(function() {
        return returnValue;
      });
      return obj[property];
    };
    through = function() {
      afterEach(function() {
        return obj[property] = previous;
      });
      obj[property] = createSpy(function(args) {
        return previous.apply(obj, args);
      });
      return obj[property];
    };
    return {
      to: to,
      "return": returnMethod,
      through: through
    };
  };

  if (typeof window !== "undefined" && window !== null) {
    window.bond = bond;
  }

  if (typeof module !== "undefined" && module !== null) {
    module.exports = bond;
  }

}).call(this);
